
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://wiofqfpicsewldvgxvhf.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Indpb2ZxZnBpY3Nld2xkdmd4dmhmIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDI4MDIzMzAsImV4cCI6MjA1ODM3ODMzMH0.4IJtb9DSehuYm9OfxaR1ODHREnGLqu_jQmR3y3EMnAg";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// Newsletter subscription function
export async function subscribeToNewsletter(email: string) {
  try {
    // Use a type assertion to work around TypeScript limitations with the database types
    const { data, error } = await supabase
      .from('newsletter_subscribers' as any)
      .insert([{ email, subscribed_at: new Date().toISOString() }] as any);
    
    if (error) throw error;
    return { success: true, data };
  } catch (error) {
    console.error('Error subscribing to newsletter:', error);
    return { success: false, error };
  }
}

// Fan interactions functions (for comments, stories, fan art)
export async function postFanComment(userId: string | null, content: string, type: 'forum' | 'story' | 'fanart', parentId?: string) {
  try {
    // Use a type assertion to work around TypeScript limitations with the database types
    const { data, error } = await supabase
      .from('fan_interactions' as any)
      .insert([{ 
        user_id: userId || 'anonymous', 
        content, 
        type,
        parent_id: parentId,
        created_at: new Date().toISOString() 
      }] as any);
    
    if (error) throw error;
    return { success: true, data };
  } catch (error) {
    console.error('Error posting fan interaction:', error);
    return { success: false, error };
  }
}

export async function getFanInteractions(type: 'forum' | 'story' | 'fanart', parentId?: string) {
  try {
    // Use a type assertion to work around TypeScript limitations with the database types
    let query = supabase
      .from('fan_interactions' as any)
      .select('*')
      .eq('type', type)
      .order('created_at', { ascending: false });
    
    if (parentId) {
      query = query.eq('parent_id', parentId);
    } else {
      query = query.is('parent_id', null);
    }
    
    const { data, error } = await query;
    
    if (error) throw error;
    return { success: true, data };
  } catch (error) {
    console.error('Error fetching fan interactions:', error);
    return { success: false, error: error };
  }
}
